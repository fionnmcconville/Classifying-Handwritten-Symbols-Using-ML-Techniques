library(caret)
library(tree)
library(rpart)
library(randomForest) # Gave a warning saying not writable, used "personal library"
library(class)
column_names1 <- c('label','index', 'nr_pix', 'height', 'width', 'tallness',
'rows_with_1','cols_with_1', 'rows_with_5_plus', 'cols_with_5_plus',
'one_neighbour', 'three_or_more_neighbours', 'no_neighbours_below',
'no_neighbours_above', 'no_neighbours_before', 'no_neighbours_after',
'nr_regions', 'nr_eyes', 'r5_c5', 'extra', 'extra1', 'extra2')
#trainfeatures <- read.csv("C:\\Users\\fionn\\OneDrive\\Documents\\Assignment2_40156103\\features\\trainingfeatures.csv", header = FALSE, col.names = column_names1)
trainfeatures <- read.csv("../features/trainingfeatures.csv", header = FALSE, col.names = column_names1)
trainfeatures
trainfeatures <- trainfeatures[,1:19 ] # Don't need 3 custom features columns
#Add label's more descriptive values as well as adding appropriate category for each symbol
#8820 training items in total, so 2940 total observations for each Category
trainfeatures["Category"] <- NA
trainfeatures$Category[1:2940] <- "Digits"
trainfeatures$Category[2941:5880] <- "Letters"
trainfeatures$Category[5881:8820] <- "Math"
trainfeatures$Category <- as.factor(trainfeatures$Category)
trainfeatures$label[trainfeatures$label==11] <- '1'
trainfeatures$label[trainfeatures$label==12] <- '2'
trainfeatures$label[trainfeatures$label==13] <- '3'
trainfeatures$label[trainfeatures$label==14] <- '4'
trainfeatures$label[trainfeatures$label==15] <- '5'
trainfeatures$label[trainfeatures$label==16] <- '6'
trainfeatures$label[trainfeatures$label==17] <- '7'
trainfeatures$label[trainfeatures$label==21] <- 'a'
trainfeatures$label[trainfeatures$label==22] <- 'b'
trainfeatures$label[trainfeatures$label==23] <- 'c'
trainfeatures$label[trainfeatures$label==24] <- 'd'
trainfeatures$label[trainfeatures$label==25] <- 'e'
trainfeatures$label[trainfeatures$label==26] <- 'f'
trainfeatures$label[trainfeatures$label==27] <- 'g'
trainfeatures$label[trainfeatures$label==31] <- '<'
trainfeatures$label[trainfeatures$label==32] <- '>'
trainfeatures$label[trainfeatures$label==33] <- '='
trainfeatures$label[trainfeatures$label==34] <- '<='
trainfeatures$label[trainfeatures$label==35] <- '>='
trainfeatures$label[trainfeatures$label==36] <- 'not='
trainfeatures$label[trainfeatures$label==37] <- 'approx'
trainfeatures$label <- as.factor(trainfeatures$label)
str(trainfeatures)
trainfeatures
drops <- c("index", "Category") # Drop unnecessary columns
trainfeatures <- trainfeatures[ , !(names(trainfeatures) %in% drops)]
trainfeatures
set.seed(3060)
tc <- trainControl("oob", classProbs = TRUE) # for out of bag
#tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures,# trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = 50)
fit.treebag
tc <- trainControl("oob", classProbs = TRUE) # for out of bag
#tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = 50)
tc <- trainControl("oob")#, classProbs = TRUE) # for out of bag
#tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = 50)
fit.treebag
tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = 50)
fit.treebag
set.seed(3060)
tc <- trainControl("oob") # for out of bag
tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = 25)
fit.treebag
tc <- trainControl("oob") # for out of bag
#tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = 25)
fit.treebag
fit.treebag$results
fit.treebag$results[1]
fit.treebag$results['Accuracy']
numbags <- c(25, 50, 200, 400)
names(numbags) < - "No. Bags"
numbags
names(numbags) < - c("No. Bags")
numbags
names(numbags) <- c("No. Bags")
numbags
numbags <- c(25, 50, 200, 400)
names(numbags) <- c("No. Bags", "No. Bags", "No. Bags", "No. Bags")
numbags
numbags <- c(25, 50, 200, 400)
names(numbags) <- c("No. Bags", "No. Bags", "No. Bags", "No. Bags")
numbags
allacc <- vector()
for (nbags in numbags) {
set.seed(3060)
tc <- trainControl("oob") # for out of bag
#tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = nbags)
acc <- fit.treebag$results['Accuracy']
acc <- cbind(acc, nbags)
allacc <- rbind(allacc, acc)
}
allacc
for (nbags in numbags) {
set.seed(3060)
tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', nbagg = nbags)
acc <- fit.treebag$results['Accuracy']
acc <- cbind(acc, nbags)
allacc <- rbind(allacc, acc)
}
allacc
allacc <- vector()
numbags <- c(25, 50, 200, 400)
names(numbags) <- c("No. Bags", "No. Bags", "No. Bags", "No. Bags")
numbags
oobacc <- vector()
#Code for finding out of bag accuracy for bagged decision trees
for (nbags in numbags) {
set.seed(3060)
tc <- trainControl("oob") # for out of bag
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', keepX = TRUE,
coob = TRUE, nbagg = nbags)
acc <- fit.treebag$results['Accuracy']
acc <- cbind(nbags, acc)
oobacc <- rbind(oobacc, acc)
}
oobacc
# Code for finding cross validated accuracy of bagged decision trees
cvacc <- vector()
for (nbags in numbags) {
set.seed(3060)
tc <- trainControl("cv", number =  5) # for cv
fit.treebag <- train(label~., data = trainfeatures, trControl = tc,
method = 'treebag', nbagg = nbags)
acc <- fit.treebag$results['Accuracy']
acc <- cbind(acc, nbags)
cvacc <- rbind(cvacc, acc)
}
allacc <- vector()
allacc <- cbind(oobacc, cvacc$Accuracy)
allacc
names(allacc) <- c("No. Bags", "OOB Accuracy", "CV Accuracy")
allacc
